package main

import (
	"bufio"
	"bytes"
	"flag"
	"go/ast"
	"go/build"
	"go/parser"
	"go/token"
	"io/ioutil"
	"log"
	"os"
	"regexp"
	"strings"
	"text/template"

	"github.com/serenize/snaker"
)

const GenerateSuffix = "_gdbinder.go"

var tagRegex = regexp.MustCompile(`([0-9a-zA-Z,_=&\(\)\-]+)(:( )?"([0-9a-zA-Z,_=&\(\)\-]*)")?`)

var (
	typeNm = flag.String("type", "", "TODO: comma-separated list of type names; must be set")
)

var tmplt = `// DO NOT EDIT!
// Code generated by gdbinder <https://github.com/Jun-Chang/gdbinder>

package {{.pkg}}

import (
	"database/sql"
)

func {{.strct}}Clmns() string {
	return "{{.clmns}}"
}

func {{.strct}}Scan(rs sql.Rows) ([]*{{.strct}}, error) {
	bound := []*{{.strct}}{}
	for rs.Next() {
		b := {{.strct}}{}
		if err := rs.Scan({{.fields}}); err != nil {
			return nil, err
		}
		bound = append(bound, &b)
	}

	return bound, nil
}
`

func main() {
	log.SetFlags(0)
	log.SetPrefix("gdbinder: ")

	flag.Parse()
	if len(*typeNm) == 0 {
		//flag.Usage()
		os.Exit(2)
	}

	dir := "."
	p, err := build.Default.ImportDir(dir, 0)
	if err != nil {
		log.Fatal(err)
	}

	fs := token.NewFileSet()
	for _, f := range p.GoFiles {
		if strings.Contains(f, GenerateSuffix) {
			continue
		}

		pf, err := parser.ParseFile(fs, f, nil, 0)
		if err != nil {
			log.Fatal(err)
		}

		for _, decl := range pf.Decls {
			genDecl, ok := decl.(*ast.GenDecl)
			if !ok {
				continue
			}
			if genDecl.Tok != token.TYPE {
				continue
			}
			for _, spec := range genDecl.Specs {
				typeSpec, ok := spec.(*ast.TypeSpec)
				if !ok {
					continue
				}
				name := typeSpec.Name.Name
				if name != *typeNm {
					continue
				}
				structType, ok := typeSpec.Type.(*ast.StructType)
				if !ok {
					continue
				}
				fields := []string{}
				clmns := []string{}
				for _, field := range structType.Fields.List {
					tag := field.Tag
					if tag == nil {
						continue
					}
					if clmn := parseTag(tag.Value); clmn != "" {
						fields = append(fields, field.Names[0].String())
						clmns = append(clmns, clmn)
					}
				}
				if err := gen(pf.Name.String(), name, fields, clmns); err != nil {
					log.Fatal(err)
				}
			}
		}
	}
}

func parseTag(exp string) string {
	list := tagRegex.FindAllStringSubmatch(exp, -1)
	for _, v := range list {
		if v[1] != "db" {
			continue
		}
		return v[4]
	}
	return ""
}

func gen(pkg string, strct string, fields []string, clmns []string) error {
	data := map[string]interface{}{}

	data["pkg"] = pkg
	data["strct"] = strct

	var fieldsBuf bytes.Buffer
	var fieldsMax = len(fields) - 1
	for i, f := range fields {
		fieldsBuf.WriteString("&b.")
		fieldsBuf.WriteString(f)
		if i < fieldsMax {
			fieldsBuf.WriteString(", ")
		}
	}
	data["fields"] = fieldsBuf.String()
	data["fieldMax"] = fieldsMax

	data["clmns"] = strings.Join(clmns, ",")

	t, err := template.New("").Parse(tmplt)
	if err != nil {
		return err
	}
	var b bytes.Buffer
	w := bufio.NewWriter(&b)
	if err := t.Execute(w, data); err != nil {
		return err
	}
	w.Flush()

	o := snaker.CamelToSnake(strct) + GenerateSuffix
	err = ioutil.WriteFile(o, b.Bytes(), os.ModePerm)
	if err == nil {
		log.Println("generate", o)
	}

	return err
}
